scalar Time

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
  key: String!
  value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type TinyJob @goModel(model: "github.com/lucagez/tinyq/sqlc.TinyJob") {
  id: ID!
}

input CreateJobArgs {
  run_at: String!
  name: String!
  state: String!
}

input UpdateJobArgs {
  run_at: String
  state: String
}

type Mutation {
  createJob(args: CreateJobArgs!): TinyJob!
  updateJobByName(name: String!, args: UpdateJobArgs!): TinyJob!
  updateJobById(id: ID!, args: UpdateJobArgs!): TinyJob!
  deleteJobByName(name: String!): TinyJob!
  deleteJobByID(id: ID!): TinyJob!
  fetchForProcessing(limit: Int! = 50): [TinyJob!]!

  # returns jobs that the server failed to commit
  commitJobs(ids: [ID!]!): [ID!]!

  # returns jobs that the server failed to mark as failed
  failJobs(ids: [ID!]!): [ID!]!

  # returns jobs that the server failed to queue for retry
  retryJobs(ids: [ID!]!): [ID!]!
}

input QueryJobsArgs {
  limit: Int! = 50
  skip: Int! = 0
  filter: String!
}

type Query {
  searchJobs(args: QueryJobsArgs!): [TinyJob!]!
  queryJobByName(name: String!): TinyJob!
  queryJobByID(id: ID!): TinyJob!
}
