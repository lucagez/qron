scalar Time

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
  key: String!
  value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type TinyJob @goModel(model: "github.com/lucagez/tinyq/sqlc.TinyJob") {
  id: ID!
  name: String
  expr: String!
  run_at: Time!
  last_run_at: Time
  start_at: Time
  timeout: Int
  created_at: Time!
  executor: String!
  state: String
  status: String!
  meta: String!
  retries: Int!
  execution_amount: Int!
}

input CreateJobArgs {
  expr: String!
  name: String!
  state: String!
  timeout: Int
  start_at: Time
  meta: String
  retries: Int
}

input UpdateJobArgs {
  expr: String
  state: String
  timeout: Int
}

input CommitArgs {
  id: ID!
  expr: String
  state: String
}

type Mutation {
  createJob(executor: String!, args: CreateJobArgs!): TinyJob!
  updateJobByName(executor: String!, name: String!, args: UpdateJobArgs!): TinyJob!
  updateJobById(executor: String!, id: ID!, args: UpdateJobArgs!): TinyJob!
  deleteJobByName(executor: String!, name: String!): TinyJob!
  deleteJobByID(executor: String!, id: ID!): TinyJob!
  stopJob(executor: String!, id: ID!): TinyJob!
  restartJob(executor: String!, id: ID!): TinyJob!
  fetchForProcessing(executor: String!, limit: Int! = 50): [TinyJob!]!

  # returns jobs that the server failed to commit
  commitJobs(executor: String!, commits: [CommitArgs!]!): [ID!]!

  # returns jobs that the server failed to mark as failed
  failJobs(executor: String!, commits: [CommitArgs!]!): [ID!]!

  # returns jobs that the server failed to queue for retry
  retryJobs(executor: String!, commits: [CommitArgs!]!): [ID!]!
}

input QueryJobsArgs {
  limit: Int! = 50
  skip: Int! = 0
  filter: String!
}

input QueryJobsMetaArgs {
  limit: Int! = 50
  skip: Int! = 0
  isOneShot: Boolean!
  name: String
  from: Time!
  to: Time!
  statuses: [String!]!
  query: String
}

type SearchJobsByMetaResult {
  jobs: [TinyJob!]!
  total: Int!
}

type Query {
  searchJobs(executor: String!, args: QueryJobsArgs!): [TinyJob!]!
  searchJobsByMeta(executor: String!, args: QueryJobsMetaArgs!): SearchJobsByMetaResult!
  queryJobByName(executor: String!, name: String!): TinyJob!
  queryJobByID(executor: String!, id: ID!): TinyJob!
}
