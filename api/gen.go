// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// HttpConfig defines model for HttpConfig.
type HttpConfig struct {
	// Method supplied to http request
	Method *string `json:"method,omitempty"`

	// Where to execute your http requests
	Url string `json:"url"`
}

// Job defines model for Job.
type Job struct {
	Config *struct {
		Schema *interface{} `json:"schema,omitempty"`
	} `json:"config,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Unique id of the job
	Id        int64      `json:"id"`
	LastRunAt *time.Time `json:"last_run_at"`

	// Name used to identify the job
	Name string `json:"name"`

	// When to run the job
	RunAt string `json:"run_at"`

	// Initial state of the job
	State   string `json:"state"`
	Timeout *int   `json:"timeout,omitempty"`
}

// JobProps defines model for JobProps.
type JobProps struct {
	Config *struct {
		Schema *interface{} `json:"schema,omitempty"`
	} `json:"config,omitempty"`

	// Name used to identify the job
	Name string `json:"name"`

	// When to run the job
	RunAt string `json:"run_at"`

	// Initial state of the job
	State string `json:"state"`
}

// ScheduleJobJSONBody defines parameters for ScheduleJob.
type ScheduleJobJSONBody = JobProps

// DeleteJobJSONBody defines parameters for DeleteJob.
type DeleteJobJSONBody = JobProps

// UpdateJobJSONBody defines parameters for UpdateJob.
type UpdateJobJSONBody = JobProps

// ScheduleJobJSONRequestBody defines body for ScheduleJob for application/json ContentType.
type ScheduleJobJSONRequestBody = ScheduleJobJSONBody

// DeleteJobJSONRequestBody defines body for DeleteJob for application/json ContentType.
type DeleteJobJSONRequestBody = DeleteJobJSONBody

// UpdateJobJSONRequestBody defines body for UpdateJob for application/json ContentType.
type UpdateJobJSONRequestBody = UpdateJobJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Schedule job
	// (POST /schedule)
	ScheduleJob(ctx echo.Context) error
	// Delete job by name
	// (DELETE /schedule/{name})
	DeleteJob(ctx echo.Context, name string) error
	// Get job properties
	// (GET /schedule/{name})
	GetJob(ctx echo.Context, name string) error
	// Update job by name
	// (PUT /schedule/{name})
	UpdateJob(ctx echo.Context, name string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ScheduleJob converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleJob(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ScheduleJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, name)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, name)
	return err
}

// UpdateJob converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateJob(ctx, name)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/schedule", wrapper.ScheduleJob)
	router.DELETE(baseURL+"/schedule/:name", wrapper.DeleteJob)
	router.GET(baseURL+"/schedule/:name", wrapper.GetJob)
	router.PUT(baseURL+"/schedule/:name", wrapper.UpdateJob)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/bOBD9K8TsHrWR84E96LgfaGOgTYok6CEwAloc2QwkkiGHQQRD/70gKceypaY5",
	"pECB5mSZHM68ee+NxA2UujFaoSIHxQZcucaGx8f/rdU2PBirDVqSGJdLLTD8CnSllYakVlCkYBb3Mqi0",
	"bThBAVLR6QlkQK3B9BdXaKHLoEHn+Oq7ibbbz0cdWalW0HUZWHzw0qKA4hb6gtvwRZfBRyLzr1aVXI2x",
	"N0hrLVLRivs6YLy8uLqG7ADFpxjInDemligYabYmMizURkdjXBl4W4+7+bpGi+E0PmHpCVmrvd1L5YZ8",
	"eSt/2HKoE/qc62Wox+v6ooLidgN/WqyggD/ynaJ5L2c+18tLq42DLhvpaZETirsAYLODIjjhXyQbnOpV",
	"inGrN0o+eGRSMF0xWiO718sDL/x9NumFmju6s169BEH5uubLGqEg63ECUojTPiY4rHBAoBSw6HoGEykT",
	"Hp/2T6IzPGmFr6B94MVu0QUgijcTpv/MG2TeJaNJgYpk1Q5IHHW7Y2vkNxVyWK9eOu6I0wSMcyVJ8prF",
	"7X0ZX/ZkD6dvb5s/dSxVpcelrqVqvzCH9hFtSC8paJuWIYNHtC4FHh/NjmYBszaouJFQwGlcysBwWkdZ",
	"It/C17Elo90EMVd9BJN9j6mtIC4PIediEDSPe/2A/qNF23uCUMXUPLwVynguv3ch/9Aar5vDQM0+xLle",
	"MsMtb5DQOhgyHDwfKXdGK5e8eDKbvSWsKUTPpG0LQwzp35xvVDt9Ziaqe4VPBktCwbCPycD5puG2HYK7",
	"j+CznQvyTbBhl0xQY3L6vtL/xfWk84DzMM8y1A7W2tq52Lp6X49s0N/hdCze3ZMQ/YrGSdoH27Bly6K2",
	"XQYrpLFNPiD9XI+8K9ImmqMcg49tl4HxE4rcmHAreB/c39EmSfv9wY0R8RaRTBBv4RAu2EWe17rk9Vo7",
	"Ko5PTs/ycHvoFt23AAAA///7Coy08wwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
