// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: batch.go

package sqlc

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v4"
)

const batchUpdateJobs = `-- name: BatchUpdateJobs :batchexec
update tiny.job
set last_run_at = $1,
    -- TODO: update
    state = $2,
    status = $3
where id = $4
`

type BatchUpdateJobsBatchResults struct {
	br  pgx.BatchResults
	ind int
}

type BatchUpdateJobsParams struct {
	LastRunAt sql.NullTime
	State     sql.NullString
	Status    TinyStatus
	ID        int64
}

func (q *Queries) BatchUpdateJobs(ctx context.Context, arg []BatchUpdateJobsParams) *BatchUpdateJobsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.LastRunAt,
			a.State,
			a.Status,
			a.ID,
		}
		batch.Queue(batchUpdateJobs, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchUpdateJobsBatchResults{br, 0}
}

func (b *BatchUpdateJobsBatchResults) Exec(f func(int, error)) {
	for {
		_, err := b.br.Exec()
		if err != nil && (err.Error() == "no result" || err.Error() == "batch already closed") {
			break
		}
		if f != nil {
			f(b.ind, err)
		}
		b.ind++
	}
}

func (b *BatchUpdateJobsBatchResults) Close() error {
	return b.br.Close()
}
