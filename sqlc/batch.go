// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: batch.go

package sqlc

import (
	"context"
	"database/sql"
	"errors"

	"github.com/jackc/pgx/v4"
)

const batchUpdateJobs = `-- name: BatchUpdateJobs :batchexec
update tiny.job
set last_run_at = $1,
  -- TODO: update
  state = $2,
  status = $3
where id = $4
and executor = $5
`

type BatchUpdateJobsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchUpdateJobsParams struct {
	LastRunAt sql.NullTime
	State     sql.NullString
	Status    TinyStatus
	ID        int64
	Executor  string
}

func (q *Queries) BatchUpdateJobs(ctx context.Context, arg []BatchUpdateJobsParams) *BatchUpdateJobsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.LastRunAt,
			a.State,
			a.Status,
			a.ID,
			a.Executor,
		}
		batch.Queue(batchUpdateJobs, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchUpdateJobsBatchResults{br, len(arg), false}
}

func (b *BatchUpdateJobsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, errors.New("batch already closed"))
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchUpdateJobsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
